package com.springmvc.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.builder.ReflectionToStringBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.springmvc.model.User;



//url:  http://localhost:8080/HelloSpringMVC/hello/mvc //加上了此部分的修改&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

@Controller  //告诉DispatcherServlet相关的容器， 这是一个Controller，
@RequestMapping(value="/hello")  //类级别的RequestMapping，告诉DispatcherServlet由这个类负责处理以及URL。HandlerMapping依靠这个标签来工作
public class HelloController {

	private static Logger log = LoggerFactory.getLogger(HelloController.class);  //日志

	//方法级别的RequestMapping， 限制并缩小了URL路径匹配，同类级别的标签协同工作，最终确定拦截到的URL由那个方法处理
	//并指定访问方法为GET
	@RequestMapping(value="/mvc",method=RequestMethod.GET)  
	public String HelloWorld(Model model){  

		model.addAttribute("message","Hello Spring MVC!!!");  //传参数给前端

		//视图渲染，/WEB-INF/view/HelloWorld.jsp
		return "HelloWorld";  //页面的名称，根据此字符串会去寻找名为HelloWorld.jsp的页面
	}  
	
	//查看方式1：本方法将处理 /hello/view?userId=123 形式的URL
	@RequestMapping(value="/view", method=RequestMethod.GET)
	public String viewUser(@RequestParam("userId") Integer userId,
			Model model) {

		//获取数据
		User user=getUserById(userId);

		//设置数据返回给前端
		model.addAttribute(user);

		return "view_user";
	}

	//查看方式2：本方法将处理 /hello/view2/123 形式的URL
	@RequestMapping("/view2/{userId}")
	public String viewUser2(@PathVariable("userId") Integer userId,
			Map<String, Object> model) {

		//获取数据
		User user=getUserById(userId);

		model.put("user",user);

		return "view_user";
	}

	//查看方式3：本方法将处理 /hello/view3?userId=123 形式的URL
	@RequestMapping("/view3")
	public String viewUser3(HttpServletRequest request) {

		//传统方式获取userId，类似Servelet的doGet方法
		Integer userId = Integer.valueOf(request.getParameter("userId"));

		//获取数据
		User user=getUserById(userId);

		request.setAttribute("user",user);

		return "view_user";
	}

	//定位到编辑信息界面 ，/hello/user?add=true
	@RequestMapping(value="/user", method = RequestMethod.GET, params = "add")
	public String createCourse(){
		return "edit_user";
	}

	/**
	 * 编辑界面的表单响应方法
	 *  保存信息，  /hello/save
	 * @param user  注意：这里直接通过实体类对象来接收页面表单的参数
	 *            加了@ModelAttribute注解来实现，但是表单中提交的name必须和User类的属性名相同才能映射
	 * @return
	 */
	@RequestMapping(value="/save", method = RequestMethod.POST)
	public String  doSave(@ModelAttribute User user,Model model){		

		log.debug("Info of Course:");
		log.debug(ReflectionToStringBuilder.toString(user));
		
		//在此进行业务操作，比如数据库持久化
		user.setId(234);
		
		System.out.println(user.toString());
		
		//处理方式一 ： 重定向查看页面，相当于刷新，不过这里因为填充了假数据，不能真正的看到刚刚添加的信息
//		return "redirect:view2/"+user.getId();
		
		//处理方式二 ： 给前端设置参数，直接返回给页面，可查看刚刚添加的信息 
		model.addAttribute("user",user);
		return "view_user";
	}
	
	
	/**
	 * 产生数据源,模拟根据 id 查找数据
	 * 
	 * 本来应该是从数据库中查询的，这里为了方便，使用假数据
	 */
	public User getUserById(Integer userId) {

		User user=new User();

		user.setId(userId);
		user.setName("张三"+userId);
		user.setSex("男");

		List<String> hobbies=new ArrayList<String>();
		hobbies.add("打篮球"+userId);
		hobbies.add("唱歌"+userId);
		hobbies.add("听音乐"+userId);
		user.setHobbyList(hobbies);

		return user;
	}

}
